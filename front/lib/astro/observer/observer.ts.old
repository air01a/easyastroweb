import { ObserverLocation } from './observer.type';
import { computeCatalog } from '../catalog/catalog';
import { getNextSunsetDate } from '../astro-utils';
import { Observer } from 'astronomy-engine';


interface GlobalObserver {
  observerLocation: ObserverLocation | null;
  observerDate: Date | null;
}

// Utiliser globalThis pour persister entre les reloads
const globalForObserver = globalThis as unknown as {
  observer: GlobalObserver | undefined;
};


if (!globalForObserver.observer) {
  globalForObserver.observer = {
    observerLocation: null,
    observerDate: null
  };
}

const observer = globalForObserver.observer;



export async function setObserverLocation(lat: number, lon: number) {
  observer.observerLocation = { latitude: lat, longitude: lon };
  computeCatalog(await getDate(), lat, lon);
}

export async function getObserverLocation(): Promise<ObserverLocation | null> {
  return  observer.observerLocation;
}

export async function getAstroObserverLocation(): Promise<Observer | null> {
  if ( observer.observerLocation) {
    console.log("Observer location set:",  observer.observerLocation);
    return new Observer( observer.observerLocation.latitude,  observer.observerLocation.longitude,0) // Default location if not set
  }
  console.log("Observer location not set, returning null");
  return null;
}

export async function setDate(d: Date) {
   observer.observerDate = d;
  computeCatalog(d,  observer.observerLocation?.latitude || 0,  observer.observerLocation?.longitude || 0);
}

export async function getDate(): Promise<Date>  {
  if (! observer.observerDate) {
     observer.observerDate = new Date();
    const nextSunset = getNextSunsetDate( observer.observerLocation?.latitude||0,  observer.observerLocation?.longitude||0);
    if (nextSunset) {
       observer.observerDate = nextSunset.date;
    }
  }
  return  observer.observerDate;
}